<?php

// константы, статические свойства и методы, магические методы и интерфейсы 
// константы привязываются не к объектам, а к самому классу (по-другому доступ к константам имеют сами классы, но не объекты классов)
// константы - постоянные и неизменяемые свойства 

/* class User 
{
   const MARK = 123;

   public function getMark() 
   {
      echo User::MARK . "<br>"; // вызвали константу через обращение к имени класса User
      echo self::MARK . "<br>"; // то же самое, что  и в строчке выше, вызвали константу через обращение к самому себе, с помощью ключевого слова self
   }
}

$user1 = new User();
//echo User::MARK; // вот так обращаемся к константе 
$user1->getMark(); // вызвали метод

// статические свойства и методы 
// достук к статическому свойству так же имеет сам класс, а не объекты и доступ к свойствам осуществляется аналогично константам 
// в отличие от констант, значения статических свойст можно изменять 

class User1 
{
   const MARK = 123;
   public static $login = 'test';

   public static function getLogin() 
   {
      echo self::$login . "<br>";
   }
}

$user2 = new User1();
$user2->getLogin(); // test
User1::getLogin(); // test вывели без создания нового объекта класса 
//echo User1::$login . "<br>"; // test
//User1::$login = 'test2'; // поменяли значение у статического свойства 
//echo User1::$login . "<br>"; // test2 */

// преимущество констант, статических свойств и методов в том, что для их использования не нужно создавать новые объекты класса 

// рассмотрим так называемые магические методы (один из них - констурктор)
// геттеры и сеттеры
// геттер вызывается автоматически в том случае, если мы пытаеммся обратиться к приватному свойству, в теле геттера можно прописать логику на такой случай, например, выводить фразу нельзя обратиться к приватному свойству с таким-то именем 

class User 
{
   public function __get($name)
   {
      echo "Нельзя обратиться к свойству с именем $name";
   }
}

$user1 = new User();